#!/bin/bash -e
#
# gmaga		GMaGa is a GPG Mail Gateway for SMTP connections
#
#		This script was written for debian
#		by Sebastian Schneider <mail@doc-network.de>
#		and is based on the spampd script written
#		by Sven Mueller <debian@incase.de>
#
# Version:	1.0  2014.02.05
#
### BEGIN INIT INFO
# Provides:		gmaga
# Required-Start: 	$remote_fs $syslog $network $named $time
# Required-Stop:  	$remote_fs $syslog $network $named $time
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	GMaGa is a GPG Mail Gateway for SMTP
# Description: 		GMaGa is a perl-based proxy the tries to decrypt incoming
#			messages.
### END INIT INFO

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
DESC='mail decrypting proxy daemon'
NAME='gmaga'
PROGRAM=/usr/sbin/gmaga
#EXECUTABLE=`head -n 1 $PROGRAM | sed -e 's,^#![ 	]*/,/,;s,[ 	].*$,,'`
EXECUTABLE=/usr/bin/perl
PIDFILE=/var/run/gmaga.pid

. /lib/lsb/init-functions

# set some important defaults (overridable via /etc/default/gmaga)
USERID=mail
GRPID=mail

if [ "`id -u`" !=  "0" ]; then
	log_failure_msg "ERROR: Insufficient privileges. Retry as root"
	# LSB 3.0 says that return value of 4 indicates insufficient privileges
	exit 4
fi

if [ -f /etc/default/$NAME ]; then
	. /etc/default/$NAME
fi
	
istrue () {
    ANS=$(echo $1 | tr A-Z a-z)
    [ "$ANS" = 'yes' -o "$ANS" = 'true' -o "$ANS" = 'enable' -o "$ANS" = '1' ]
}

#
# find out wether to start gmaga or not
#
istrue ${STARTGMAGA} && STARTGMAGA='true'

#
# Check wether the program is actually there
#
# return 5 as demanded by LSB 2.1 when program isn't installed.
[  -x $PROGRAM ] || exit 5

# 
# Calculate final commandline
#

ARGS=""

[ -n "${LISTEN}" ] && ARGS="${ARGS} --listen=${LISTEN}"

[ -n "${TALK}" ] && ARGS="${ARGS} --talk=${TALK}"

[ -n "${CHILDREN}" ] && ARGS="${ARGS} --children=${CHILDREN}"

[ -n "${PIDFILE}" ] && ARGS="${ARGS} --pidfile=${PIDFILE}"

[ -n "${TMPDIR}" ] && ARGS="${ARGS} --tmpdir=${TMPDIR}"

[ -n "${ADDOPTS}" ] && ARGS="${ARGS} ${ADDOPTS}"

function check_pid () {
	# $1 : process name
	# $2 : pid file
	# $3 : (optional) verbosity
	VERBOSE=""
	[ "$3" = "verbose" ] && VERBOSE=1
	if [ -f $2 ]; then
		kill -0 `cat $2` > /dev/null 2>&1
		RETVAL=$?
		if [ "$RETVAL" = "0" ]; then
			[ "$VERBOSE" ] && log_success_msg "$1 is running as `cat $2`"
			return 0
		else
			[ "$VERBOSE" ] && log_failure_msg "PIDFILE $2 for $1 exists, but $1 is not running."
			rm $2
			return 1
		fi
	else
		[ "$VERBOSE" ] && log_failure_msg "PIDFILE $2 for $1 doesn't exist."
		return 4
	fi
	return 3
}

case "$1" in
	start)
		if ! istrue "${STARTGMAGA}"; then
			log_warning_msg "Starting $DESC: $NAME (disabled in /etc/default/$NAME)."
			# LSB 2.1: 6 mean unconfigured. This seems appropriate here.
			exit 6
		fi
		log_daemon_msg "Starting $DESC" "$NAME"
		# if GMaGa is already running, exit 0 as demanded by LSB 2.1
		# this also removes the PIDFILE if it exists but has no matching
		# process
		if check_pid $PROGRAM $PIDFILE ; then
			log_end_msg 0
			exit 0
		fi
		# if gmaga is not installed, return 5 as demanded by LSB 2.1
		if [ ! -x $EXECUTABLE ]; then
			log_error_msg "failed! - executable not found"
			exit 5
		fi
		# start daemon
		start-stop-daemon --start --exec $EXECUTABLE --startas $PROGRAM --pidfile $PIDFILE --chuid $USERID --group $GRPID -- $ARGS
		if [ "$?" = '0' ]; then
			log_end_msg 0
			exit 0
		else
			log_end_msg 7
			# LSB 2.1 says 7 should be returned when program
			# isn't running.
			exit 7
		fi
		;;
	stop)
		echo -n "Stopping $DESC: $NAME "
		set +e
		# if $PROGRAM is not running under PID given in
		# $PIDFILE, exit with 0 to be LSB compliant
		check_pid $PROGRAM $PIDFILE || exit 0
		if istrue "$STARTGMAGA" ; then
			start-stop-daemon --stop --exec $EXECUTABLE \
				--pidfile $PIDFILE
		else
			start-stop-daemon --stop --exec $EXECUTABLE \
				--pidfile $PIDFILE > /dev/null 2>&1
		fi
		if [ "$?" = "0" ]; then
			log_end_msg 0
			if [ -e $PIDFILE ]; then
				rm $PIDFILE
			fi
			exit 0
		else
			if ! check_pid $PROGRAM $PIDFILE ; then
				log_end_msg 0
				exit 0
			else
				# if we had not successfully stopped the
				# program, we can assume the user didn't
				# have sufficient privileges.
				log_end_msg 1
				exit 4
			fi
		fi
		;;
	status)
		check_pid $PROGRAM $PIDFILE verbose
		exit $?
		;;
	reload)
		log_warning_msg "reload not implemented, try force-reload/restart instead"
		exit 3
		;;
	force-reload|try-restart)
		if check_pid $PROGRAM $PIDFILE ; then
			exec $0 restart
		else
			log_warning_msg "$DESC is not running. Try '$0 start' to start it."
			# LSB 2.1 says that this should return success, anyhow.
			exit 0
		fi
		;;
	restart)
		if check_pid $PROGRAM $PIDFILE ; then
			$0 stop
			sleep 2
		fi
		exec $0 start
		;;
	help)
		echo "Usage: $0 (start|stop|restart|try-restart|force-reload|status)"
		exit 0
		;;
	*)	echo "Usage: $0 (start|stop|restart|try-restart|force-reload|status|help)"
		exit 2
		;;

esac

log_error_msg "This point shouldn't be reached. Some weird thing happened"
exit 1
